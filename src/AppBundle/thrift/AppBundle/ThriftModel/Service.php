<?php
namespace AppBundle\ThriftModel;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ServiceIf {
  /**
   */
  public function ping();
  /**
   * @param int $id
   * @return \AppBundle\ThriftModel\Test
   * @throws \AppBundle\ThriftModel\InvalidValueException
   */
  public function get($id);
  /**
   * @param int $id
   * @return \AppBundle\ThriftModel\Test[]
   * @throws \AppBundle\ThriftModel\InvalidValueException
   */
  public function getList($id);
  /**
   * @param \AppBundle\ThriftModel\Test $test
   * @return int
   * @throws \AppBundle\ThriftModel\InvalidValueException
   */
  public function create(\AppBundle\ThriftModel\Test $test);
}

class ServiceClient implements \AppBundle\ThriftModel\ServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function ping()
  {
    $this->send_ping();
    $this->recv_ping();
  }

  public function send_ping()
  {
    $args = new \AppBundle\ThriftModel\Service_ping_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ping', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ping()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\AppBundle\ThriftModel\Service_ping_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \AppBundle\ThriftModel\Service_ping_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function get($id)
  {
    $this->send_get($id);
    return $this->recv_get();
  }

  public function send_get($id)
  {
    $args = new \AppBundle\ThriftModel\Service_get_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\AppBundle\ThriftModel\Service_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \AppBundle\ThriftModel\Service_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("get failed: unknown result");
  }

  public function getList($id)
  {
    $this->send_getList($id);
    return $this->recv_getList();
  }

  public function send_getList($id)
  {
    $args = new \AppBundle\ThriftModel\Service_getList_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\AppBundle\ThriftModel\Service_getList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \AppBundle\ThriftModel\Service_getList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("getList failed: unknown result");
  }

  public function create(\AppBundle\ThriftModel\Test $test)
  {
    $this->send_create($test);
    return $this->recv_create();
  }

  public function send_create(\AppBundle\ThriftModel\Test $test)
  {
    $args = new \AppBundle\ThriftModel\Service_create_args();
    $args->test = $test;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\AppBundle\ThriftModel\Service_create_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \AppBundle\ThriftModel\Service_create_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("create failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Service_ping_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Service_ping_args';
  }

  public function read($input)
  {
    return $this->_read('Service_ping_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('Service_ping_args', self::$_TSPEC, $output);
  }

}

class Service_ping_result extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Service_ping_result';
  }

  public function read($input)
  {
    return $this->_read('Service_ping_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('Service_ping_result', self::$_TSPEC, $output);
  }

}

class Service_get_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Service_get_args';
  }

  public function read($input)
  {
    return $this->_read('Service_get_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('Service_get_args', self::$_TSPEC, $output);
  }

}

class Service_get_result extends TBase {
  static $_TSPEC;

  /**
   * @var \AppBundle\ThriftModel\Test
   */
  public $success = null;
  /**
   * @var \AppBundle\ThriftModel\InvalidValueException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\AppBundle\ThriftModel\Test',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\AppBundle\ThriftModel\InvalidValueException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Service_get_result';
  }

  public function read($input)
  {
    return $this->_read('Service_get_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('Service_get_result', self::$_TSPEC, $output);
  }

}

class Service_getList_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Service_getList_args';
  }

  public function read($input)
  {
    return $this->_read('Service_getList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('Service_getList_args', self::$_TSPEC, $output);
  }

}

class Service_getList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \AppBundle\ThriftModel\Test[]
   */
  public $success = null;
  /**
   * @var \AppBundle\ThriftModel\InvalidValueException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AppBundle\ThriftModel\Test',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\AppBundle\ThriftModel\InvalidValueException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Service_getList_result';
  }

  public function read($input)
  {
    return $this->_read('Service_getList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('Service_getList_result', self::$_TSPEC, $output);
  }

}

class Service_create_args extends TBase {
  static $_TSPEC;

  /**
   * @var \AppBundle\ThriftModel\Test
   */
  public $test = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'test',
          'type' => TType::STRUCT,
          'class' => '\AppBundle\ThriftModel\Test',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Service_create_args';
  }

  public function read($input)
  {
    return $this->_read('Service_create_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('Service_create_args', self::$_TSPEC, $output);
  }

}

class Service_create_result extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \AppBundle\ThriftModel\InvalidValueException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\AppBundle\ThriftModel\InvalidValueException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Service_create_result';
  }

  public function read($input)
  {
    return $this->_read('Service_create_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('Service_create_result', self::$_TSPEC, $output);
  }

}

class ServiceProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_ping($seqid, $input, $output) {
    $args = new \AppBundle\ThriftModel\Service_ping_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \AppBundle\ThriftModel\Service_ping_result();
    $this->handler_->ping();
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'ping', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('ping', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get($seqid, $input, $output) {
    $args = new \AppBundle\ThriftModel\Service_get_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \AppBundle\ThriftModel\Service_get_result();
    try {
      $result->success = $this->handler_->get($args->id);
    } catch (\AppBundle\ThriftModel\InvalidValueException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getList($seqid, $input, $output) {
    $args = new \AppBundle\ThriftModel\Service_getList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \AppBundle\ThriftModel\Service_getList_result();
    try {
      $result->success = $this->handler_->getList($args->id);
    } catch (\AppBundle\ThriftModel\InvalidValueException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getList', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getList', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_create($seqid, $input, $output) {
    $args = new \AppBundle\ThriftModel\Service_create_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \AppBundle\ThriftModel\Service_create_result();
    try {
      $result->success = $this->handler_->create($args->test);
    } catch (\AppBundle\ThriftModel\InvalidValueException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'create', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('create', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

